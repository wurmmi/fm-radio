-------------------------------------------------------------------------------
--! @file      {{name|pretty}}_reg_pkg.vhd
--! @author    Super Easy Register Scripting Engine (SERSE)
--! @copyright 2017 - 2021 Michael Wurm
--! @brief     Register interface constants package for {{name}}
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

library {{name|pretty}}lib;
use {{name|pretty}}lib.{{name|pretty}}_pkg.all;

--! @brief Package declaration of {{name|pretty}}_reg_pkg
--! @details
--! Generated by SERSE. Constants for register interface, for use in testbench.

package {{name|pretty}}_reg_pkg is

  -----------------------------------------------------------------------------
  --! @name Types and Constants
  -----------------------------------------------------------------------------
  --! @{

  constant axi_access_time_c : time := 4 * clk_period_c;

  type access_type_t is
    (READ_ONLY, WRITE_ONLY, READ_WRITE, INTERRUPT, INTERRUPT_ERROR);

  type register_t is record
    address     : unsigned(31 downto 0);
    access_type : access_type_t;
    reset       : std_ulogic_vector(31 downto 0);
    mask        : std_ulogic_vector(31 downto 0);
  end record register_t;

  type registers_t is array (0 to num_registers_c-1) of register_t;

  constant register_map_c : registers_t := (
  {% for i in range(map|length) %}
  {% set reg = map[i] %}
  {% if loop.last %}
    {{i}} => ({{reg.offset|hex32}}, {{reg.access}}, {{reg.reset|hex32}}, {{reg.mask|hex32}}));
  {% else %}
    {{i}} => ({{reg.offset|hex32}}, {{reg.access}}, {{reg.reset|hex32}}, {{reg.mask|hex32}}),
  {% endif %}
  {% endfor %}

  {% for reg in map %}
  -- Register: {{reg.full|upper}}
  constant {{reg.full|upper}}_ADDR : unsigned(31 downto 0) := {{reg.offset|hex32}};
  constant {{reg.full|upper}}_MASK : std_ulogic_vector(31 downto 0) := {{reg.mask|hex32}};

  {% for field in reg.fields %}
  constant {{reg.full|upper}}_{{field.name|upper}}_Pos : natural := {{field.offset}};
  constant {{reg.full|upper}}_{{field.name|upper}}_Len : natural := {{field.width}};
  {% if field.width > 1 %}
  {% set field_width = field.width %}
  constant {{reg.full|upper}}_{{field.name|upper}}_Rst : std_ulogic_vector({{field.width-1}} downto 0) := b"{{field.reset|bin(field_width)}}";
  {% else %}
  constant {{reg.full|upper}}_{{field.name|upper}}_Rst : std_ulogic := '{{field.reset}}';
  {% endif %}

  {% endfor %}
  {% endfor %}

  -----------------------------------------------------------------------------
  -- Functions
  -----------------------------------------------------------------------------

end package {{name|pretty}}_reg_pkg;

package body {{name|pretty}}_reg_pkg is
end package body {{name|pretty}}_reg_pkg;

