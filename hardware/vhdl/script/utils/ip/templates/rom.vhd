-------------------------------------------------------------------------------
--! @file      {{name|pretty}}_rom.vhd
--! @author    Super Easy Register Scripting Engine (SERSE)
--! @copyright 2017-2021 Michael Wurm
--! @brief     Read-only memory for {{name}}
--
-- This file is generated by SERSE.
-- *** DO NOT MODIFY ***
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

--! @brief Entity declaration of {{name|pretty}}_rom
--! @details
--! This is a generated ROM.

entity {{name | pretty}}_rom is
  port (
    --! @name Clocks and resets
    --! @{

    --! System clock
    clk_i : in std_ulogic;

    --! @}
    --! @name Interface
    --! @{

    --! Address
    addr_i : in std_ulogic_vector(3 downto 0);
    --! Data
    data_o : out std_ulogic_vector(31 downto 0));

  --! @}
  {% if protect %}

  -- Enable IEEE P1735 source code encryption
  attribute secure_config                          : string;
  attribute secure_config of {{name | pretty}}_rom : entity is "PROTECT";

  {% endif %}
end entity {{name | pretty}}_rom;

--! RTL implementation of {{name|pretty}}_rom
architecture rtl of {{name | pretty}}_rom is

  -----------------------------------------------------------------------------
  --! @name Types and Constants
  -----------------------------------------------------------------------------
  --! @{

  --! ROM
  type rom_t is array (0 to 2 ** addr_i'length - 1) of
  std_ulogic_vector(data_o'range);

  --! ROM content
  constant rom_c : rom_t := (
    {% for word in rom %}
    {{loop.index0}} => x"{{word}}",
    {% endfor %}
    others => (others => '0'));

  --! @}
  -----------------------------------------------------------------------------
  --! @name Internal Registers
  -----------------------------------------------------------------------------
  --! @{

  signal data : std_ulogic_vector(data_o'range) := (others => '0');

  --! @}

begin -- architecture rtl

  -----------------------------------------------------------------------------
  -- Outputs
  -----------------------------------------------------------------------------

  data_o <= data;

  -----------------------------------------------------------------------------
  -- Registers
  -----------------------------------------------------------------------------

  regs : process (clk_i) is
  begin -- process regs
    if rising_edge(clk_i) then
      data <= rom_c(to_integer(unsigned(addr_i)));
    end if;
  end process regs;

end architecture rtl;
