-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity channel_decoder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_sample_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_sample_V_V_empty_n : IN STD_LOGIC;
    in_sample_V_V_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of channel_decoder is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv30_34000000 : STD_LOGIC_VECTOR (29 downto 0) := "110100000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fir_pilot_inst_shift_ce0 : STD_LOGIC;
    signal fir_pilot_inst_shift_we0 : STD_LOGIC;
    signal fir_pilot_inst_shift_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_bp_pilot_coef_ce0 : STD_LOGIC;
    signal filter_bp_pilot_coef_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fir_mono_inst_shift_s_ce0 : STD_LOGIC;
    signal fir_mono_inst_shift_s_we0 : STD_LOGIC;
    signal fir_mono_inst_shift_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_lp_mono_coeff_ce0 : STD_LOGIC;
    signal filter_lp_mono_coeff_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_41 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_30 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_19 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_40 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_39 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_38 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_37 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_36 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_35 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_34 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_33 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_32 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_31 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_29 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_27 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_26 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_25 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_24 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_23 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_22 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_21 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_20 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_18 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_17 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_16 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal fir_lrdiff_inst_shif_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_bp_lrdiff_coe_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fir_mono_inst_shift_1_ce0 : STD_LOGIC;
    signal fir_mono_inst_shift_1_we0 : STD_LOGIC;
    signal fir_mono_inst_shift_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_lp_mono_coeff_1_ce0 : STD_LOGIC;
    signal filter_lp_mono_coeff_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_sample_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_220_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_681 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_cast_fu_665_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal OP1_V_cast_reg_692 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_operator_s_fu_191_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_191_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_191_ap_done : STD_LOGIC;
    signal carrier_38k_V_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mono_delayed_V_reg_702 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_operator_s_fu_203_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_203_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_203_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal p_0_i3_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_191_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_operator_s_fu_191_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 : STD_LOGIC;
    signal grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 : STD_LOGIC;
    signal grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_191_x_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_191_coeff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_191_coeff_V_ce0 : STD_LOGIC;
    signal grp_operator_s_fu_191_coeff_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_203_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 : STD_LOGIC;
    signal grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 : STD_LOGIC;
    signal grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_203_coeff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_203_coeff_V_ce0 : STD_LOGIC;
    signal grp_operator_s_fu_203_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_158 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_10_reg_169 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_180 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_s_fu_191_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_operator_s_fu_203_ap_start_reg : STD_LOGIC := '0';
    signal agg_result_L_V_write_fu_226_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_R_V_write_fu_232_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_i_fu_256_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_fu_266_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal addconv_i_fu_273_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_fu_671_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal OP1_V_cast_fu_665_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_262_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal OP1_V_cast_fu_665_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 : OUT STD_LOGIC;
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 : OUT STD_LOGIC;
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        x_V : IN STD_LOGIC_VECTOR (15 downto 0);
        coeff_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        coeff_V_ce0 : OUT STD_LOGIC;
        coeff_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_hls_mkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component channel_decoder_fcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component channel_decoder_fdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component channel_decoder_ffYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component channel_decoder_fhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fir_pilot_inst_shift_U : component channel_decoder_fcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => fir_pilot_inst_shift_ce0,
        we0 => fir_pilot_inst_shift_we0,
        d0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_pilot_inst_shift_q0);

    filter_bp_pilot_coef_U : component channel_decoder_fdEe
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_191_coeff_V_address0,
        ce0 => filter_bp_pilot_coef_ce0,
        q0 => filter_bp_pilot_coef_q0);

    fir_mono_inst_shift_s_U : component channel_decoder_fcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => fir_mono_inst_shift_s_ce0,
        we0 => fir_mono_inst_shift_s_we0,
        d0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_mono_inst_shift_s_q0);

    filter_lp_mono_coeff_U : component channel_decoder_ffYi
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_191_coeff_V_address0,
        ce0 => filter_lp_mono_coeff_ce0,
        q0 => filter_lp_mono_coeff_q0);

    fir_lrdiff_inst_shif_U : component channel_decoder_fcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0,
        we0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0,
        d0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_lrdiff_inst_shif_q0);

    filter_bp_lrdiff_coe_U : component channel_decoder_fhbi
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_203_coeff_V_address0,
        ce0 => grp_operator_s_fu_203_coeff_V_ce0,
        q0 => filter_bp_lrdiff_coe_q0);

    fir_mono_inst_shift_1_U : component channel_decoder_fcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => fir_mono_inst_shift_1_ce0,
        we0 => fir_mono_inst_shift_1_we0,
        d0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_mono_inst_shift_1_q0);

    filter_lp_mono_coeff_1_U : component channel_decoder_ffYi
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_191_coeff_V_address0,
        ce0 => filter_lp_mono_coeff_1_ce0,
        q0 => filter_lp_mono_coeff_1_q0);

    grp_operator_s_fu_191 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_s_fu_191_ap_start,
        ap_done => grp_operator_s_fu_191_ap_done,
        ap_idle => grp_operator_s_fu_191_ap_idle,
        ap_ready => grp_operator_s_fu_191_ap_ready,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 => grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0,
        x_V => grp_operator_s_fu_191_x_V,
        coeff_V_address0 => grp_operator_s_fu_191_coeff_V_address0,
        coeff_V_ce0 => grp_operator_s_fu_191_coeff_V_ce0,
        coeff_V_q0 => grp_operator_s_fu_191_coeff_V_q0,
        ap_return => grp_operator_s_fu_191_ap_return);

    grp_operator_s_fu_203 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_s_fu_203_ap_start,
        ap_done => grp_operator_s_fu_203_ap_done,
        ap_idle => grp_operator_s_fu_203_ap_idle,
        ap_ready => grp_operator_s_fu_203_ap_ready,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 => grp_operator_s_fu_203_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 => fir_lrdiff_inst_shif_q0,
        x_V => tmp_V_reg_686,
        coeff_V_address0 => grp_operator_s_fu_203_coeff_V_address0,
        coeff_V_ce0 => grp_operator_s_fu_203_coeff_V_ce0,
        coeff_V_q0 => filter_bp_lrdiff_coe_q0,
        ap_return => grp_operator_s_fu_203_ap_return);

    fm_receiver_hls_mkbM_U6 : component fm_receiver_hls_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => OP1_V_cast_fu_665_p0,
        din1 => OP1_V_cast_fu_665_p1,
        dout => OP1_V_cast_fu_665_p2);

    fm_receiver_hls_mkbM_U7 : component fm_receiver_hls_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => carrier_38k_V_reg_697,
        din1 => grp_operator_s_fu_203_ap_return,
        dout => r_V_fu_671_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= agg_result_L_V_write_fu_226_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= agg_result_R_V_write_fu_232_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_191_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_s_fu_191_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_0)))) then 
                    grp_operator_s_fu_191_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_191_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_191_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_203_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_s_fu_203_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_operator_s_fu_203_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_203_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_203_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_operator_s_fu_191_ap_done = ap_const_logic_1))) then 
                i_reg_180 <= i_2_reg_681;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_180 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_operator_s_fu_191_ap_done = ap_const_logic_1))) then
                OP1_V_cast_reg_692 <= OP1_V_cast_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                carrier_38k_V_reg_697 <= addconv_i_fu_273_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                delay_inst_shift_reg_10 <= delay_inst_shift_reg_9;
                delay_inst_shift_reg_11 <= delay_inst_shift_reg_10;
                delay_inst_shift_reg_12 <= grp_operator_s_fu_191_ap_return;
                delay_inst_shift_reg_13 <= delay_inst_shift_reg_12;
                delay_inst_shift_reg_14 <= delay_inst_shift_reg_13;
                delay_inst_shift_reg_15 <= delay_inst_shift_reg_14;
                delay_inst_shift_reg_16 <= delay_inst_shift_reg_15;
                delay_inst_shift_reg_17 <= delay_inst_shift_reg_16;
                delay_inst_shift_reg_18 <= delay_inst_shift_reg_17;
                delay_inst_shift_reg_19 <= delay_inst_shift_reg_11;
                delay_inst_shift_reg_20 <= delay_inst_shift_reg_18;
                delay_inst_shift_reg_21 <= delay_inst_shift_reg_20;
                delay_inst_shift_reg_22 <= delay_inst_shift_reg_21;
                delay_inst_shift_reg_23 <= delay_inst_shift_reg_22;
                delay_inst_shift_reg_24 <= delay_inst_shift_reg_23;
                delay_inst_shift_reg_25 <= delay_inst_shift_reg_24;
                delay_inst_shift_reg_26 <= delay_inst_shift_reg_25;
                delay_inst_shift_reg_27 <= delay_inst_shift_reg_26;
                delay_inst_shift_reg_28 <= delay_inst_shift_reg_27;
                delay_inst_shift_reg_29 <= delay_inst_shift_reg_28;
                delay_inst_shift_reg_30 <= delay_inst_shift_reg_19;
                delay_inst_shift_reg_31 <= delay_inst_shift_reg_29;
                delay_inst_shift_reg_32 <= delay_inst_shift_reg_31;
                delay_inst_shift_reg_33 <= delay_inst_shift_reg_32;
                delay_inst_shift_reg_34 <= delay_inst_shift_reg_33;
                delay_inst_shift_reg_35 <= delay_inst_shift_reg_34;
                delay_inst_shift_reg_36 <= delay_inst_shift_reg_35;
                delay_inst_shift_reg_37 <= delay_inst_shift_reg_36;
                delay_inst_shift_reg_38 <= delay_inst_shift_reg_37;
                delay_inst_shift_reg_39 <= delay_inst_shift_reg_38;
                delay_inst_shift_reg_40 <= delay_inst_shift_reg_39;
                delay_inst_shift_reg_41 <= delay_inst_shift_reg_30;
                delay_inst_shift_reg_6 <= delay_inst_shift_reg_40;
                delay_inst_shift_reg_7 <= delay_inst_shift_reg_6;
                delay_inst_shift_reg_8 <= delay_inst_shift_reg_7;
                delay_inst_shift_reg_9 <= delay_inst_shift_reg_8;
                mono_delayed_V_reg_702 <= delay_inst_shift_reg_41;
                p_0_i3_reg_707 <= r_V_fu_671_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_2_reg_681 <= i_2_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_operator_s_fu_191_ap_done = ap_const_logic_1))) then
                p_Val2_10_reg_169 <= grp_operator_s_fu_191_ap_return;
                p_Val2_s_reg_158 <= mono_delayed_V_reg_702;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_0))) then
                tmp_V_reg_686 <= in_sample_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_sample_V_V_empty_n, ap_CS_fsm_state2, tmp_fu_214_p2, ap_CS_fsm_state3, grp_operator_s_fu_191_ap_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_operator_s_fu_191_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_operator_s_fu_191_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    OP1_V_cast_fu_665_p0 <= tmp_1_fu_262_p1(16 - 1 downto 0);
    OP1_V_cast_fu_665_p1 <= tmp_1_fu_262_p1(16 - 1 downto 0);
    addconv_i_fu_273_p2 <= std_logic_vector(signed(ap_const_lv30_34000000) + signed(p_Val2_9_fu_266_p3));
    agg_result_L_V_write_fu_226_p2 <= std_logic_vector(unsigned(p_Val2_10_reg_169) + unsigned(p_Val2_s_reg_158));
    agg_result_R_V_write_fu_232_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_158) - unsigned(p_Val2_10_reg_169));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state2_assign_proc : process(in_sample_V_V_empty_n, tmp_fu_214_p2)
    begin
                ap_block_state2 <= ((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0));
    end process;


    ap_block_state2_ignore_call1_assign_proc : process(in_sample_V_V_empty_n, tmp_fu_214_p2)
    begin
                ap_block_state2_ignore_call1 <= ((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0));
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(grp_operator_s_fu_191_ap_done, grp_operator_s_fu_203_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((grp_operator_s_fu_203_ap_done = ap_const_logic_0) or (grp_operator_s_fu_191_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, in_sample_V_V_empty_n, ap_CS_fsm_state2, tmp_fu_214_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in_sample_V_V_empty_n, ap_CS_fsm_state2, tmp_fu_214_p2)
    begin
        if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(in_sample_V_V_empty_n, ap_CS_fsm_state2, tmp_fu_214_p2, agg_result_L_V_write_fu_226_p2, ap_return_0_preg)
    begin
        if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_1))) then 
            ap_return_0 <= agg_result_L_V_write_fu_226_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(in_sample_V_V_empty_n, ap_CS_fsm_state2, tmp_fu_214_p2, agg_result_R_V_write_fu_232_p2, ap_return_1_preg)
    begin
        if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_1))) then 
            ap_return_1 <= agg_result_R_V_write_fu_232_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    filter_bp_pilot_coef_ce0_assign_proc : process(ap_CS_fsm_state3, grp_operator_s_fu_191_coeff_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filter_bp_pilot_coef_ce0 <= grp_operator_s_fu_191_coeff_V_ce0;
        else 
            filter_bp_pilot_coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_lp_mono_coeff_1_ce0_assign_proc : process(ap_CS_fsm_state7, grp_operator_s_fu_191_coeff_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            filter_lp_mono_coeff_1_ce0 <= grp_operator_s_fu_191_coeff_V_ce0;
        else 
            filter_lp_mono_coeff_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_lp_mono_coeff_ce0_assign_proc : process(ap_CS_fsm_state5, grp_operator_s_fu_191_coeff_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filter_lp_mono_coeff_ce0 <= grp_operator_s_fu_191_coeff_V_ce0;
        else 
            filter_lp_mono_coeff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_mono_inst_shift_1_ce0_assign_proc : process(ap_CS_fsm_state7, grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fir_mono_inst_shift_1_ce0 <= grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0;
        else 
            fir_mono_inst_shift_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_mono_inst_shift_1_we0_assign_proc : process(ap_CS_fsm_state7, grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fir_mono_inst_shift_1_we0 <= grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0;
        else 
            fir_mono_inst_shift_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_mono_inst_shift_s_ce0_assign_proc : process(ap_CS_fsm_state5, grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fir_mono_inst_shift_s_ce0 <= grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0;
        else 
            fir_mono_inst_shift_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_mono_inst_shift_s_we0_assign_proc : process(ap_CS_fsm_state5, grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fir_mono_inst_shift_s_we0 <= grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0;
        else 
            fir_mono_inst_shift_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_pilot_inst_shift_ce0_assign_proc : process(ap_CS_fsm_state3, grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_pilot_inst_shift_ce0 <= grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0;
        else 
            fir_pilot_inst_shift_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_pilot_inst_shift_we0_assign_proc : process(ap_CS_fsm_state3, grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_pilot_inst_shift_we0 <= grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0;
        else 
            fir_pilot_inst_shift_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0_assign_proc : process(fir_pilot_inst_shift_q0, fir_mono_inst_shift_s_q0, fir_mono_inst_shift_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= fir_mono_inst_shift_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= fir_mono_inst_shift_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= fir_pilot_inst_shift_q0;
        else 
            grp_operator_s_fu_191_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_s_fu_191_ap_start <= grp_operator_s_fu_191_ap_start_reg;

    grp_operator_s_fu_191_coeff_V_q0_assign_proc : process(filter_bp_pilot_coef_q0, filter_lp_mono_coeff_q0, filter_lp_mono_coeff_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_operator_s_fu_191_coeff_V_q0 <= filter_lp_mono_coeff_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_operator_s_fu_191_coeff_V_q0 <= filter_lp_mono_coeff_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_operator_s_fu_191_coeff_V_q0 <= filter_bp_pilot_coef_q0;
        else 
            grp_operator_s_fu_191_coeff_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_s_fu_191_x_V_assign_proc : process(tmp_V_reg_686, ap_CS_fsm_state3, ap_CS_fsm_state5, p_0_i3_reg_707, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_operator_s_fu_191_x_V <= p_0_i3_reg_707;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_operator_s_fu_191_x_V <= tmp_V_reg_686;
        else 
            grp_operator_s_fu_191_x_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_s_fu_203_ap_start <= grp_operator_s_fu_203_ap_start_reg;
    i_2_fu_220_p2 <= std_logic_vector(unsigned(i_reg_180) + unsigned(ap_const_lv2_1));

    in_sample_V_V_blk_n_assign_proc : process(in_sample_V_V_empty_n, ap_CS_fsm_state2, tmp_fu_214_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_0))) then 
            in_sample_V_V_blk_n <= in_sample_V_V_empty_n;
        else 
            in_sample_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_sample_V_V_read_assign_proc : process(in_sample_V_V_empty_n, ap_CS_fsm_state2, tmp_fu_214_p2)
    begin
        if ((not(((in_sample_V_V_empty_n = ap_const_logic_0) and (tmp_fu_214_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_214_p2 = ap_const_lv1_0))) then 
            in_sample_V_V_read <= ap_const_logic_1;
        else 
            in_sample_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_9_fu_266_p3 <= (OP1_V_cast_reg_692 & ap_const_lv1_0);
    p_Val2_i_fu_256_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_2_fu_250_p2));
        tmp_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_i_fu_256_p2),29));

    tmp_2_fu_250_p2 <= std_logic_vector(shift_left(unsigned(grp_operator_s_fu_191_ap_return),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    tmp_fu_214_p2 <= "1" when (i_reg_180 = ap_const_lv2_3) else "0";
end behav;
