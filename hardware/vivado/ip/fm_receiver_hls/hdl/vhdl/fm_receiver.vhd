-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fm_receiver is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    iq_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_in_V_TVALID : IN STD_LOGIC;
    iq_in_V_TREADY : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fm_receiver is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal delay_inst_shift_reg_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay_inst_shift_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal iq_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_315_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_487 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_1_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_495 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal p_Val2_6_reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_reg_505 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_channel_decoder_fu_216_ap_start : STD_LOGIC;
    signal grp_channel_decoder_fu_216_ap_done : STD_LOGIC;
    signal grp_channel_decoder_fu_216_ap_idle : STD_LOGIC;
    signal grp_channel_decoder_fu_216_ap_ready : STD_LOGIC;
    signal grp_channel_decoder_fu_216_in_sample_V_V_read : STD_LOGIC;
    signal grp_channel_decoder_fu_216_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_channel_decoder_fu_216_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_194 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_205 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal fm_channel_data_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_channel_data_V_V_full_n : STD_LOGIC;
    signal fm_channel_data_V_V_write : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal tmp_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_channel_decoder_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal fm_channel_data_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_channel_data_V_V_empty_n : STD_LOGIC;
    signal fm_channel_data_V_V_read : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Val2_s_fu_333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_fu_337_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_i_fu_413_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_464_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_7_i_fu_407_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_471_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component channel_decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_sample_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_sample_V_V_empty_n : IN STD_LOGIC;
        in_sample_V_V_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_hls_mlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fifo_w16_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_channel_decoder_fu_216 : component channel_decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_channel_decoder_fu_216_ap_start,
        ap_done => grp_channel_decoder_fu_216_ap_done,
        ap_idle => grp_channel_decoder_fu_216_ap_idle,
        ap_ready => grp_channel_decoder_fu_216_ap_ready,
        in_sample_V_V_dout => fm_channel_data_V_V_dout,
        in_sample_V_V_empty_n => fm_channel_data_V_V_empty_n,
        in_sample_V_V_read => grp_channel_decoder_fu_216_in_sample_V_V_read,
        ap_return_0 => grp_channel_decoder_fu_216_ap_return_0,
        ap_return_1 => grp_channel_decoder_fu_216_ap_return_1);

    fm_receiver_hls_mlbW_U14 : component fm_receiver_hls_mlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => p_Val2_s_fu_333_p1,
        din1 => p_Val2_i_fu_413_p2,
        dout => p_Val2_4_fu_464_p2);

    fm_receiver_hls_mlbW_U15 : component fm_receiver_hls_mlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => p_Val2_7_i_fu_407_p2,
        din1 => p_Val2_3_fu_337_p4,
        dout => p_Val2_5_fu_471_p2);

    fm_channel_data_V_V_fifo_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fm_channel_data_V_V_din,
        if_full_n => fm_channel_data_V_V_full_n,
        if_write => fm_channel_data_V_V_write,
        if_dout => fm_channel_data_V_V_dout,
        if_empty_n => fm_channel_data_V_V_empty_n,
        if_read => fm_channel_data_V_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((grp_channel_decoder_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_return_0_preg <= grp_channel_decoder_fu_216_ap_return_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((grp_channel_decoder_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_return_1_preg <= grp_channel_decoder_fu_216_ap_return_1;
                end if; 
            end if;
        end if;
    end process;


    grp_channel_decoder_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_channel_decoder_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_channel_decoder_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_channel_decoder_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_channel_decoder_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_s_fu_321_p2 = ap_const_lv1_0) and (iq_in_V_TVALID = ap_const_logic_0))) and (tmp_s_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_194 <= i_1_reg_487;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_194 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_205 <= ap_const_lv4_0;
            elsif ((not(((tmp_2_reg_510 = ap_const_lv1_1) and (fm_channel_data_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_reg_205 <= k_1_reg_495;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_s_fu_321_p2 = ap_const_lv1_0) and (iq_in_V_TVALID = ap_const_logic_0))) and (tmp_s_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                delay_inst_shift_reg <= iq_in_V_TDATA(31 downto 16);
                delay_inst_shift_reg_1 <= delay_inst_shift_reg;
                delay_inst_shift_reg_2 <= delay_inst_shift_reg_1;
                delay_inst_shift_reg_3 <= p_Val2_s_fu_333_p1;
                delay_inst_shift_reg_4 <= delay_inst_shift_reg_3;
                delay_inst_shift_reg_5 <= delay_inst_shift_reg_4;
                p_Val2_6_reg_500 <= p_Val2_4_fu_464_p2(29 downto 14);
                p_Val2_7_reg_505 <= p_Val2_5_fu_471_p2(29 downto 14);
                tmp_2_reg_510 <= tmp_2_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_487 <= i_1_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_s_fu_321_p2 = ap_const_lv1_0) and (iq_in_V_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                k_1_reg_495 <= k_1_fu_327_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, iq_in_V_TVALID, ap_CS_fsm_state3, tmp_s_fu_321_p2, ap_CS_fsm_state2, tmp_2_reg_510, grp_channel_decoder_fu_216_ap_done, ap_CS_fsm_state4, fm_channel_data_V_V_full_n, tmp_fu_309_p2, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((tmp_s_fu_321_p2 = ap_const_lv1_0) and (iq_in_V_TVALID = ap_const_logic_0))) and (tmp_s_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((tmp_s_fu_321_p2 = ap_const_lv1_0) and (iq_in_V_TVALID = ap_const_logic_0))) and (tmp_s_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((tmp_2_reg_510 = ap_const_lv1_1) and (fm_channel_data_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_channel_decoder_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state3_assign_proc : process(iq_in_V_TVALID, tmp_s_fu_321_p2)
    begin
                ap_block_state3 <= ((tmp_s_fu_321_p2 = ap_const_lv1_0) and (iq_in_V_TVALID = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(tmp_2_reg_510, fm_channel_data_V_V_full_n)
    begin
                ap_block_state4 <= ((tmp_2_reg_510 = ap_const_lv1_1) and (fm_channel_data_V_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_channel_decoder_fu_216_ap_done, ap_CS_fsm_state5)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_channel_decoder_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_channel_decoder_fu_216_ap_done, ap_CS_fsm_state5)
    begin
        if (((grp_channel_decoder_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(grp_channel_decoder_fu_216_ap_done, grp_channel_decoder_fu_216_ap_return_0, ap_CS_fsm_state5, ap_return_0_preg)
    begin
        if (((grp_channel_decoder_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_return_0 <= grp_channel_decoder_fu_216_ap_return_0;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_channel_decoder_fu_216_ap_done, grp_channel_decoder_fu_216_ap_return_1, ap_CS_fsm_state5, ap_return_1_preg)
    begin
        if (((grp_channel_decoder_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_return_1 <= grp_channel_decoder_fu_216_ap_return_1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    fm_channel_data_V_V_din <= std_logic_vector(unsigned(p_Val2_6_reg_500) - unsigned(p_Val2_7_reg_505));

    fm_channel_data_V_V_read_assign_proc : process(grp_channel_decoder_fu_216_in_sample_V_V_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fm_channel_data_V_V_read <= grp_channel_decoder_fu_216_in_sample_V_V_read;
        else 
            fm_channel_data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fm_channel_data_V_V_write_assign_proc : process(tmp_2_reg_510, ap_CS_fsm_state4, fm_channel_data_V_V_full_n)
    begin
        if ((not(((tmp_2_reg_510 = ap_const_lv1_1) and (fm_channel_data_V_V_full_n = ap_const_logic_0))) and (tmp_2_reg_510 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            fm_channel_data_V_V_write <= ap_const_logic_1;
        else 
            fm_channel_data_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_channel_decoder_fu_216_ap_start <= grp_channel_decoder_fu_216_ap_start_reg;
    i_1_fu_315_p2 <= std_logic_vector(unsigned(i_reg_194) + unsigned(ap_const_lv2_1));

    iq_in_V_TDATA_blk_n_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state3, tmp_s_fu_321_p2)
    begin
        if (((tmp_s_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            iq_in_V_TDATA_blk_n <= iq_in_V_TVALID;
        else 
            iq_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_in_V_TREADY_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state3, tmp_s_fu_321_p2)
    begin
        if ((not(((tmp_s_fu_321_p2 = ap_const_lv1_0) and (iq_in_V_TVALID = ap_const_logic_0))) and (tmp_s_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            iq_in_V_TREADY <= ap_const_logic_1;
        else 
            iq_in_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    k_1_fu_327_p2 <= std_logic_vector(unsigned(k_reg_205) + unsigned(ap_const_lv4_1));
    p_Val2_3_fu_337_p4 <= iq_in_V_TDATA(31 downto 16);
    p_Val2_7_i_fu_407_p2 <= std_logic_vector(signed(p_Val2_s_fu_333_p1) - signed(delay_inst_shift_reg_5));
    p_Val2_i_fu_413_p2 <= std_logic_vector(signed(p_Val2_3_fu_337_p4) - signed(delay_inst_shift_reg_2));
    p_Val2_s_fu_333_p1 <= iq_in_V_TDATA(16 - 1 downto 0);
    tmp_2_fu_453_p2 <= "1" when (k_reg_205 = ap_const_lv4_7) else "0";
    tmp_fu_309_p2 <= "1" when (i_reg_194 = ap_const_lv2_3) else "0";
    tmp_s_fu_321_p2 <= "1" when (k_reg_205 = ap_const_lv4_8) else "0";
end behav;
