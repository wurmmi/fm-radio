-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fm_receiver is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    iq_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_in_V_TVALID : IN STD_LOGIC;
    iq_in_V_TREADY : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fm_receiver is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv30_34000000 : STD_LOGIC_VECTOR (29 downto 0) := "110100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fir_pilot_inst_shift_ce0 : STD_LOGIC;
    signal fir_pilot_inst_shift_we0 : STD_LOGIC;
    signal fir_pilot_inst_shift_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_bp_pilot_coef_ce0 : STD_LOGIC;
    signal filter_bp_pilot_coef_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fir_mono_inst_shift_s_ce0 : STD_LOGIC;
    signal fir_mono_inst_shift_s_we0 : STD_LOGIC;
    signal fir_mono_inst_shift_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_lp_mono_coeff_ce0 : STD_LOGIC;
    signal filter_lp_mono_coeff_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fir_lrdiff_inst_shif_ce0 : STD_LOGIC;
    signal fir_lrdiff_inst_shif_we0 : STD_LOGIC;
    signal fir_lrdiff_inst_shif_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_bp_lrdiff_coe_ce0 : STD_LOGIC;
    signal filter_bp_lrdiff_coe_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fir_mono_inst_shift_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filter_lp_mono_coeff_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal delay_inst_shift_reg_2_ce0 : STD_LOGIC;
    signal delay_inst_shift_reg_2_we0 : STD_LOGIC;
    signal delay_inst_shift_reg_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_2_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal delay_inst_shift_reg_2_ce1 : STD_LOGIC;
    signal delay_inst_shift_reg_2_we1 : STD_LOGIC;
    signal delay_inst_shift_reg_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal delay_inst_shift_reg_ce0 : STD_LOGIC;
    signal delay_inst_shift_reg_we0 : STD_LOGIC;
    signal delay_inst_shift_reg_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal delay_inst_shift_reg_ce1 : STD_LOGIC;
    signal delay_inst_shift_reg_we1 : STD_LOGIC;
    signal delay_inst_shift_reg_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal delay_inst_shift_reg_1_ce0 : STD_LOGIC;
    signal delay_inst_shift_reg_1_we0 : STD_LOGIC;
    signal delay_inst_shift_reg_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal delay_inst_shift_reg_1_ce1 : STD_LOGIC;
    signal delay_inst_shift_reg_1_we1 : STD_LOGIC;
    signal delay_inst_shift_reg_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_423 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_429 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_1_fu_446_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_662 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_1_fu_458_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_670 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_474_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_reg_689 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_11_reg_694 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_fu_541_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_702 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mono_delayed_V_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal delay_inst_shift_reg_8_reg_713 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_9_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal delay_inst_shift_reg_10_reg_723 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_11_reg_728 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal delay_inst_shift_reg_12_reg_733 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_13_reg_738 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal delay_inst_shift_reg_14_reg_743 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_15_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal delay_inst_shift_reg_16_reg_753 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_17_reg_758 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal delay_inst_shift_reg_18_reg_763 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_19_reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal delay_inst_shift_reg_20_reg_773 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_21_reg_778 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal delay_inst_shift_reg_22_reg_783 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_23_reg_788 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal delay_inst_shift_reg_24_reg_793 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_25_reg_798 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal delay_inst_shift_reg_26_reg_803 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_27_reg_808 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal delay_inst_shift_reg_28_reg_813 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_29_reg_818 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal delay_inst_shift_reg_30_reg_823 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_31_reg_828 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal delay_inst_shift_reg_32_reg_833 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_33_reg_838 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal delay_inst_shift_reg_34_reg_843 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_35_reg_848 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal delay_inst_shift_reg_36_reg_853 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_37_reg_858 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal delay_inst_shift_reg_38_reg_863 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_inst_shift_reg_39_reg_868 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal delay_inst_shift_reg_40_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal fm_channel_data_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_channel_data_V_V_empty_n : STD_LOGIC;
    signal fm_channel_data_V_V_read : STD_LOGIC;
    signal OP1_V_cast_fu_640_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal OP1_V_cast_reg_883 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_operator_s_fu_399_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_399_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_399_ap_done : STD_LOGIC;
    signal carrier_38k_V_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal p_0_i3_i_reg_893 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_operator_s_fu_414_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_operator_s_fu_414_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_414_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_414_ap_done : STD_LOGIC;
    signal ap_block_state43_on_subcall_done : BOOLEAN;
    signal grp_operator_s_fu_399_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 : STD_LOGIC;
    signal grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 : STD_LOGIC;
    signal grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_399_coeff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_399_coeff_V_ce0 : STD_LOGIC;
    signal grp_operator_s_fu_399_coeff_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_399_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_414_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 : STD_LOGIC;
    signal grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 : STD_LOGIC;
    signal grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_414_coeff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_operator_s_fu_414_coeff_V_ce0 : STD_LOGIC;
    signal i_reg_344 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_355 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal fm_channel_data_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_channel_data_V_V_full_n : STD_LOGIC;
    signal fm_channel_data_V_V_write : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal tmp_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal audio_lrdiff_dec_V_reg_366 : STD_LOGIC_VECTOR (15 downto 0);
    signal audio_mono_dec_V_reg_377 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_reg_388 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_s_fu_399_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_operator_s_fu_414_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Val2_i_fu_490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_626_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_7_i_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_fu_633_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ssdm_int_V_write_ass_fu_547_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ssdm_int_V_write_ass_1_fu_553_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_i_i_fu_577_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_587_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal addconv_i_i_fu_594_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_fu_646_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal OP1_V_cast_fu_640_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_583_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal OP1_V_cast_fu_640_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 : OUT STD_LOGIC;
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 : OUT STD_LOGIC;
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        x_V : IN STD_LOGIC_VECTOR (15 downto 0);
        coeff_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        coeff_V_ce0 : OUT STD_LOGIC;
        coeff_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_hls_mncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fm_receiver_hls_mocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component fm_receiver_fir_pcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_filtedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_filtefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_filtehbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_delaykbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fm_receiver_delaymb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fifo_w16_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    fir_pilot_inst_shift_U : component fm_receiver_fir_pcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => fir_pilot_inst_shift_ce0,
        we0 => fir_pilot_inst_shift_we0,
        d0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_pilot_inst_shift_q0);

    filter_bp_pilot_coef_U : component fm_receiver_filtedEe
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_399_coeff_V_address0,
        ce0 => filter_bp_pilot_coef_ce0,
        q0 => filter_bp_pilot_coef_q0);

    fir_mono_inst_shift_s_U : component fm_receiver_fir_pcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => fir_mono_inst_shift_s_ce0,
        we0 => fir_mono_inst_shift_s_we0,
        d0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_mono_inst_shift_s_q0);

    filter_lp_mono_coeff_U : component fm_receiver_filtefYi
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_399_coeff_V_address0,
        ce0 => filter_lp_mono_coeff_ce0,
        q0 => filter_lp_mono_coeff_q0);

    fir_lrdiff_inst_shif_U : component fm_receiver_fir_pcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => fir_lrdiff_inst_shif_ce0,
        we0 => fir_lrdiff_inst_shif_we0,
        d0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_lrdiff_inst_shif_q0);

    filter_bp_lrdiff_coe_U : component fm_receiver_filtehbi
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_399_coeff_V_address0,
        ce0 => filter_bp_lrdiff_coe_ce0,
        q0 => filter_bp_lrdiff_coe_q0);

    fir_mono_inst_shift_1_U : component fm_receiver_fir_pcud
    generic map (
        DataWidth => 16,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        ce0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0,
        we0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0,
        d0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        q0 => fir_mono_inst_shift_1_q0);

    filter_lp_mono_coeff_1_U : component fm_receiver_filtefYi
    generic map (
        DataWidth => 16,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_operator_s_fu_414_coeff_V_address0,
        ce0 => grp_operator_s_fu_414_coeff_V_ce0,
        q0 => filter_lp_mono_coeff_1_q0);

    delay_inst_shift_reg_2_U : component fm_receiver_delaykbM
    generic map (
        DataWidth => 16,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_inst_shift_reg_2_address0,
        ce0 => delay_inst_shift_reg_2_ce0,
        we0 => delay_inst_shift_reg_2_we0,
        d0 => delay_inst_shift_reg_2_d0,
        q0 => delay_inst_shift_reg_2_q0,
        address1 => delay_inst_shift_reg_2_address1,
        ce1 => delay_inst_shift_reg_2_ce1,
        we1 => delay_inst_shift_reg_2_we1,
        d1 => reg_423,
        q1 => delay_inst_shift_reg_2_q1);

    delay_inst_shift_reg_U : component fm_receiver_delaykbM
    generic map (
        DataWidth => 16,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_inst_shift_reg_address0,
        ce0 => delay_inst_shift_reg_ce0,
        we0 => delay_inst_shift_reg_we0,
        d0 => delay_inst_shift_reg_d0,
        q0 => delay_inst_shift_reg_q0,
        address1 => delay_inst_shift_reg_address1,
        ce1 => delay_inst_shift_reg_ce1,
        we1 => delay_inst_shift_reg_we1,
        d1 => reg_429,
        q1 => delay_inst_shift_reg_q1);

    delay_inst_shift_reg_1_U : component fm_receiver_delaymb6
    generic map (
        DataWidth => 16,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_inst_shift_reg_1_address0,
        ce0 => delay_inst_shift_reg_1_ce0,
        we0 => delay_inst_shift_reg_1_we0,
        d0 => delay_inst_shift_reg_1_d0,
        q0 => delay_inst_shift_reg_1_q0,
        address1 => delay_inst_shift_reg_1_address1,
        ce1 => delay_inst_shift_reg_1_ce1,
        we1 => delay_inst_shift_reg_1_we1,
        d1 => delay_inst_shift_reg_1_d1,
        q1 => delay_inst_shift_reg_1_q1);

    grp_operator_s_fu_399 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_s_fu_399_ap_start,
        ap_done => grp_operator_s_fu_399_ap_done,
        ap_idle => grp_operator_s_fu_399_ap_idle,
        ap_ready => grp_operator_s_fu_399_ap_ready,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 => grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0,
        x_V => tmp_V_reg_878,
        coeff_V_address0 => grp_operator_s_fu_399_coeff_V_address0,
        coeff_V_ce0 => grp_operator_s_fu_399_coeff_V_ce0,
        coeff_V_q0 => grp_operator_s_fu_399_coeff_V_q0,
        ap_return => grp_operator_s_fu_399_ap_return);

    grp_operator_s_fu_414 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_s_fu_414_ap_start,
        ap_done => grp_operator_s_fu_414_ap_done,
        ap_idle => grp_operator_s_fu_414_ap_idle,
        ap_ready => grp_operator_s_fu_414_ap_ready,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_address0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0 => grp_operator_s_fu_414_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_d0,
        FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 => fir_mono_inst_shift_1_q0,
        x_V => p_0_i3_i_reg_893,
        coeff_V_address0 => grp_operator_s_fu_414_coeff_V_address0,
        coeff_V_ce0 => grp_operator_s_fu_414_coeff_V_ce0,
        coeff_V_q0 => filter_lp_mono_coeff_1_q0,
        ap_return => grp_operator_s_fu_414_ap_return);

    fm_receiver_hls_mncg_U6 : component fm_receiver_hls_mncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => p_Val2_4_fu_470_p1,
        din1 => p_Val2_i_fu_490_p2,
        dout => p_Val2_7_fu_626_p2);

    fm_receiver_hls_mncg_U7 : component fm_receiver_hls_mncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => p_Val2_7_i_fu_484_p2,
        din1 => p_Val2_6_fu_474_p4,
        dout => p_Val2_8_fu_633_p2);

    fm_receiver_hls_mocq_U8 : component fm_receiver_hls_mocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => OP1_V_cast_fu_640_p0,
        din1 => OP1_V_cast_fu_640_p1,
        dout => OP1_V_cast_fu_640_p2);

    fm_receiver_hls_mocq_U9 : component fm_receiver_hls_mocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => carrier_38k_V_reg_888,
        din1 => grp_operator_s_fu_399_ap_return,
        dout => r_V_fu_646_p2);

    fm_channel_data_V_V_fifo_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fm_channel_data_V_V_din,
        if_full_n => fm_channel_data_V_V_full_n,
        if_write => fm_channel_data_V_V_write,
        if_dout => fm_channel_data_V_V_dout,
        if_empty_n => fm_channel_data_V_V_empty_n,
        if_read => fm_channel_data_V_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((tmp_i_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_0_preg <= ssdm_int_V_write_ass_fu_547_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((tmp_i_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_1_preg <= ssdm_int_V_write_ass_1_fu_553_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_s_fu_399_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
                    grp_operator_s_fu_399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_399_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_414_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_s_fu_414_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    grp_operator_s_fu_414_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_414_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_414_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_388 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_i_reg_388 <= i_2_reg_702;
            end if; 
        end if;
    end process;

    i_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_344 <= i_1_reg_662;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_344 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_355 <= ap_const_lv4_0;
            elsif ((not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_reg_355 <= k_1_reg_670;
            end if; 
        end if;
    end process;

    reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_423 <= delay_inst_shift_reg_2_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_423 <= delay_inst_shift_reg_2_q0;
            end if; 
        end if;
    end process;

    reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_429 <= delay_inst_shift_reg_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_429 <= delay_inst_shift_reg_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                OP1_V_cast_reg_883 <= OP1_V_cast_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                audio_lrdiff_dec_V_reg_366 <= grp_operator_s_fu_414_ap_return;
                audio_mono_dec_V_reg_377 <= mono_delayed_V_reg_707;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                carrier_38k_V_reg_888 <= addconv_i_i_fu_594_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                delay_inst_shift_reg_10_reg_723 <= delay_inst_shift_reg_1_q0;
                delay_inst_shift_reg_9_reg_718 <= delay_inst_shift_reg_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                delay_inst_shift_reg_11_reg_728 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_12_reg_733 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                delay_inst_shift_reg_13_reg_738 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_14_reg_743 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                delay_inst_shift_reg_15_reg_748 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_16_reg_753 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                delay_inst_shift_reg_17_reg_758 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_18_reg_763 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                delay_inst_shift_reg_19_reg_768 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_20_reg_773 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                delay_inst_shift_reg_21_reg_778 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_22_reg_783 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                delay_inst_shift_reg_23_reg_788 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_24_reg_793 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                delay_inst_shift_reg_25_reg_798 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_26_reg_803 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                delay_inst_shift_reg_27_reg_808 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_28_reg_813 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                delay_inst_shift_reg_29_reg_818 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_30_reg_823 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                delay_inst_shift_reg_31_reg_828 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_32_reg_833 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                delay_inst_shift_reg_33_reg_838 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_34_reg_843 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                delay_inst_shift_reg_35_reg_848 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_36_reg_853 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                delay_inst_shift_reg_37_reg_858 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_38_reg_863 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                delay_inst_shift_reg_39_reg_868 <= delay_inst_shift_reg_1_q1;
                delay_inst_shift_reg_40_reg_873 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                delay_inst_shift_reg_8_reg_713 <= delay_inst_shift_reg_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_662 <= i_1_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_702 <= i_2_fu_541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_1_reg_670 <= k_1_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mono_delayed_V_reg_707 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                p_0_i3_i_reg_893 <= r_V_fu_646_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                p_Val2_11_reg_694 <= p_Val2_8_fu_633_p2(29 downto 14);
                p_Val2_4_reg_679 <= p_Val2_4_fu_470_p1;
                p_Val2_6_reg_684 <= iq_in_V_TDATA(31 downto 16);
                p_Val2_9_reg_689 <= p_Val2_7_fu_626_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_435 <= delay_inst_shift_reg_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_5_reg_675 <= tmp_5_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                tmp_V_reg_878 <= fm_channel_data_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, iq_in_V_TVALID, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_5_reg_675, tmp_s_fu_452_p2, ap_CS_fsm_state7, ap_CS_fsm_state38, fm_channel_data_V_V_empty_n, ap_CS_fsm_state39, grp_operator_s_fu_399_ap_done, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_block_state43_on_subcall_done, ap_CS_fsm_state6, fm_channel_data_V_V_full_n, tmp_fu_440_p2, tmp_i_fu_535_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_i_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    OP1_V_cast_fu_640_p0 <= tmp_7_fu_583_p1(16 - 1 downto 0);
    OP1_V_cast_fu_640_p1 <= tmp_7_fu_583_p1(16 - 1 downto 0);
    addconv_i_i_fu_594_p2 <= std_logic_vector(signed(ap_const_lv30_34000000) + signed(p_Val2_2_fu_587_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state43_on_subcall_done_assign_proc : process(grp_operator_s_fu_399_ap_done, grp_operator_s_fu_414_ap_done)
    begin
                ap_block_state43_on_subcall_done <= ((grp_operator_s_fu_414_ap_done = ap_const_logic_0) or (grp_operator_s_fu_399_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(tmp_5_reg_675, fm_channel_data_V_V_full_n)
    begin
                ap_block_state6 <= ((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, tmp_i_fu_535_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_i_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, tmp_i_fu_535_p2)
    begin
        if (((tmp_i_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state7, ssdm_int_V_write_ass_fu_547_p2, tmp_i_fu_535_p2, ap_return_0_preg)
    begin
        if (((tmp_i_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_0 <= ssdm_int_V_write_ass_fu_547_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, ssdm_int_V_write_ass_1_fu_553_p2, tmp_i_fu_535_p2, ap_return_1_preg)
    begin
        if (((tmp_i_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_1 <= ssdm_int_V_write_ass_1_fu_553_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    delay_inst_shift_reg_1_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_23;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_21;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            delay_inst_shift_reg_1_address0 <= ap_const_lv6_1;
        else 
            delay_inst_shift_reg_1_address0 <= "XXXXXX";
        end if; 
    end process;


    delay_inst_shift_reg_1_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_23;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_21;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            delay_inst_shift_reg_1_address1 <= ap_const_lv6_3;
        else 
            delay_inst_shift_reg_1_address1 <= "XXXXXX";
        end if; 
    end process;


    delay_inst_shift_reg_1_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state38, fm_channel_data_V_V_empty_n, ap_CS_fsm_state39, grp_operator_s_fu_399_ap_done, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_block_state43_on_subcall_done, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            delay_inst_shift_reg_1_ce0 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_1_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state38, fm_channel_data_V_V_empty_n, ap_CS_fsm_state39, grp_operator_s_fu_399_ap_done, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_block_state43_on_subcall_done, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            delay_inst_shift_reg_1_ce1 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_1_d0_assign_proc : process(ap_CS_fsm_state26, delay_inst_shift_reg_8_reg_713, delay_inst_shift_reg_10_reg_723, delay_inst_shift_reg_12_reg_733, delay_inst_shift_reg_14_reg_743, delay_inst_shift_reg_16_reg_753, delay_inst_shift_reg_18_reg_763, delay_inst_shift_reg_20_reg_773, delay_inst_shift_reg_22_reg_783, delay_inst_shift_reg_24_reg_793, delay_inst_shift_reg_26_reg_803, delay_inst_shift_reg_28_reg_813, delay_inst_shift_reg_30_reg_823, delay_inst_shift_reg_32_reg_833, delay_inst_shift_reg_34_reg_843, delay_inst_shift_reg_36_reg_853, delay_inst_shift_reg_38_reg_863, delay_inst_shift_reg_40_reg_873, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, grp_operator_s_fu_399_ap_return, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            delay_inst_shift_reg_1_d0 <= grp_operator_s_fu_399_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_40_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_38_reg_863;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_36_reg_853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_34_reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_32_reg_833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_30_reg_823;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_28_reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_26_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_24_reg_793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_22_reg_783;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_20_reg_773;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_18_reg_763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_16_reg_753;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_14_reg_743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_12_reg_733;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_10_reg_723;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            delay_inst_shift_reg_1_d0 <= delay_inst_shift_reg_8_reg_713;
        else 
            delay_inst_shift_reg_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_inst_shift_reg_1_d1_assign_proc : process(reg_435, ap_CS_fsm_state26, mono_delayed_V_reg_707, delay_inst_shift_reg_9_reg_718, delay_inst_shift_reg_11_reg_728, delay_inst_shift_reg_13_reg_738, delay_inst_shift_reg_15_reg_748, delay_inst_shift_reg_17_reg_758, delay_inst_shift_reg_19_reg_768, delay_inst_shift_reg_21_reg_778, delay_inst_shift_reg_23_reg_788, delay_inst_shift_reg_25_reg_798, delay_inst_shift_reg_27_reg_808, delay_inst_shift_reg_29_reg_818, delay_inst_shift_reg_31_reg_828, delay_inst_shift_reg_33_reg_838, delay_inst_shift_reg_35_reg_848, delay_inst_shift_reg_37_reg_858, delay_inst_shift_reg_39_reg_868, ap_CS_fsm_state25, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_39_reg_868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_37_reg_858;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_35_reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_33_reg_838;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_31_reg_828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_29_reg_818;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_27_reg_808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_25_reg_798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_23_reg_788;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_21_reg_778;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_19_reg_768;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_17_reg_758;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_15_reg_748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_13_reg_738;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_11_reg_728;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            delay_inst_shift_reg_1_d1 <= delay_inst_shift_reg_9_reg_718;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            delay_inst_shift_reg_1_d1 <= reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            delay_inst_shift_reg_1_d1 <= mono_delayed_V_reg_707;
        else 
            delay_inst_shift_reg_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_inst_shift_reg_1_we0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state38, fm_channel_data_V_V_empty_n, ap_CS_fsm_state39, grp_operator_s_fu_399_ap_done, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_block_state43_on_subcall_done, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            delay_inst_shift_reg_1_we0 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_1_we1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state38, fm_channel_data_V_V_empty_n, ap_CS_fsm_state39, grp_operator_s_fu_399_ap_done, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_block_state43_on_subcall_done, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_operator_s_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            delay_inst_shift_reg_1_we1 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_2_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_inst_shift_reg_2_address0 <= ap_const_lv2_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            delay_inst_shift_reg_2_address0 <= ap_const_lv2_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            delay_inst_shift_reg_2_address0 <= ap_const_lv2_1;
        else 
            delay_inst_shift_reg_2_address0 <= "XX";
        end if; 
    end process;


    delay_inst_shift_reg_2_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_inst_shift_reg_2_address1 <= ap_const_lv2_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            delay_inst_shift_reg_2_address1 <= ap_const_lv2_0;
        else 
            delay_inst_shift_reg_2_address1 <= "XX";
        end if; 
    end process;


    delay_inst_shift_reg_2_ce0_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_2_ce0 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_2_ce1_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, ap_CS_fsm_state4, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_2_ce1 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_2_d0_assign_proc : process(delay_inst_shift_reg_2_q0, ap_CS_fsm_state5, p_Val2_4_reg_679, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_inst_shift_reg_2_d0 <= p_Val2_4_reg_679;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_inst_shift_reg_2_d0 <= delay_inst_shift_reg_2_q0;
        else 
            delay_inst_shift_reg_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_inst_shift_reg_2_we0_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_2_we0 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_2_we1_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_2_we1 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_inst_shift_reg_address0 <= ap_const_lv2_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            delay_inst_shift_reg_address0 <= ap_const_lv2_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            delay_inst_shift_reg_address0 <= ap_const_lv2_1;
        else 
            delay_inst_shift_reg_address0 <= "XX";
        end if; 
    end process;


    delay_inst_shift_reg_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_inst_shift_reg_address1 <= ap_const_lv2_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            delay_inst_shift_reg_address1 <= ap_const_lv2_0;
        else 
            delay_inst_shift_reg_address1 <= "XX";
        end if; 
    end process;


    delay_inst_shift_reg_ce0_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_ce0 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_ce1_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, ap_CS_fsm_state4, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_ce1 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_d0_assign_proc : process(delay_inst_shift_reg_q0, ap_CS_fsm_state5, p_Val2_6_reg_684, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_inst_shift_reg_d0 <= p_Val2_6_reg_684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_inst_shift_reg_d0 <= delay_inst_shift_reg_q0;
        else 
            delay_inst_shift_reg_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_inst_shift_reg_we0_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_we0 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_inst_shift_reg_we1_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5, tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if (((not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            delay_inst_shift_reg_we1 <= ap_const_logic_1;
        else 
            delay_inst_shift_reg_we1 <= ap_const_logic_0;
        end if; 
    end process;


    filter_bp_lrdiff_coe_ce0_assign_proc : process(ap_CS_fsm_state41, grp_operator_s_fu_399_coeff_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            filter_bp_lrdiff_coe_ce0 <= grp_operator_s_fu_399_coeff_V_ce0;
        else 
            filter_bp_lrdiff_coe_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_bp_pilot_coef_ce0_assign_proc : process(ap_CS_fsm_state39, grp_operator_s_fu_399_coeff_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            filter_bp_pilot_coef_ce0 <= grp_operator_s_fu_399_coeff_V_ce0;
        else 
            filter_bp_pilot_coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_lp_mono_coeff_ce0_assign_proc : process(ap_CS_fsm_state43, grp_operator_s_fu_399_coeff_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            filter_lp_mono_coeff_ce0 <= grp_operator_s_fu_399_coeff_V_ce0;
        else 
            filter_lp_mono_coeff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_lrdiff_inst_shif_ce0_assign_proc : process(ap_CS_fsm_state41, grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            fir_lrdiff_inst_shif_ce0 <= grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0;
        else 
            fir_lrdiff_inst_shif_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_lrdiff_inst_shif_we0_assign_proc : process(ap_CS_fsm_state41, grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            fir_lrdiff_inst_shif_we0 <= grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0;
        else 
            fir_lrdiff_inst_shif_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_mono_inst_shift_s_ce0_assign_proc : process(ap_CS_fsm_state43, grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            fir_mono_inst_shift_s_ce0 <= grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0;
        else 
            fir_mono_inst_shift_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_mono_inst_shift_s_we0_assign_proc : process(ap_CS_fsm_state43, grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            fir_mono_inst_shift_s_we0 <= grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0;
        else 
            fir_mono_inst_shift_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_pilot_inst_shift_ce0_assign_proc : process(ap_CS_fsm_state39, grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            fir_pilot_inst_shift_ce0 <= grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_ce0;
        else 
            fir_pilot_inst_shift_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_pilot_inst_shift_we0_assign_proc : process(ap_CS_fsm_state39, grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            fir_pilot_inst_shift_we0 <= grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_we0;
        else 
            fir_pilot_inst_shift_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fm_channel_data_V_V_din <= std_logic_vector(unsigned(p_Val2_9_reg_689) - unsigned(p_Val2_11_reg_694));

    fm_channel_data_V_V_read_assign_proc : process(ap_CS_fsm_state38, fm_channel_data_V_V_empty_n)
    begin
        if (((fm_channel_data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            fm_channel_data_V_V_read <= ap_const_logic_1;
        else 
            fm_channel_data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fm_channel_data_V_V_write_assign_proc : process(tmp_5_reg_675, ap_CS_fsm_state6, fm_channel_data_V_V_full_n)
    begin
        if ((not(((fm_channel_data_V_V_full_n = ap_const_logic_0) and (tmp_5_reg_675 = ap_const_lv1_1))) and (tmp_5_reg_675 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fm_channel_data_V_V_write <= ap_const_logic_1;
        else 
            fm_channel_data_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0_assign_proc : process(fir_pilot_inst_shift_q0, fir_mono_inst_shift_s_q0, fir_lrdiff_inst_shif_q0, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= fir_mono_inst_shift_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= fir_lrdiff_inst_shif_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= fir_pilot_inst_shift_q0;
        else 
            grp_operator_s_fu_399_FIR_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_ap_fixed_16_2_5_3_0_I_shift_reg_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_s_fu_399_ap_start <= grp_operator_s_fu_399_ap_start_reg;

    grp_operator_s_fu_399_coeff_V_q0_assign_proc : process(filter_bp_pilot_coef_q0, filter_lp_mono_coeff_q0, filter_bp_lrdiff_coe_q0, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_operator_s_fu_399_coeff_V_q0 <= filter_lp_mono_coeff_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_operator_s_fu_399_coeff_V_q0 <= filter_bp_lrdiff_coe_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_operator_s_fu_399_coeff_V_q0 <= filter_bp_pilot_coef_q0;
        else 
            grp_operator_s_fu_399_coeff_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_s_fu_414_ap_start <= grp_operator_s_fu_414_ap_start_reg;
    i_1_fu_446_p2 <= std_logic_vector(unsigned(i_reg_344) + unsigned(ap_const_lv2_1));
    i_2_fu_541_p2 <= std_logic_vector(unsigned(i_i_reg_388) + unsigned(ap_const_lv2_1));

    iq_in_V_TDATA_blk_n_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iq_in_V_TDATA_blk_n <= iq_in_V_TVALID;
        else 
            iq_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_in_V_TREADY_assign_proc : process(iq_in_V_TVALID, ap_CS_fsm_state5)
    begin
        if (((iq_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            iq_in_V_TREADY <= ap_const_logic_1;
        else 
            iq_in_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    k_1_fu_458_p2 <= std_logic_vector(unsigned(k_reg_355) + unsigned(ap_const_lv4_1));
    p_Val2_2_fu_587_p3 <= (OP1_V_cast_reg_883 & ap_const_lv1_0);
    p_Val2_4_fu_470_p1 <= iq_in_V_TDATA(16 - 1 downto 0);
    p_Val2_6_fu_474_p4 <= iq_in_V_TDATA(31 downto 16);
    p_Val2_7_i_fu_484_p2 <= std_logic_vector(signed(p_Val2_4_fu_470_p1) - signed(reg_423));
    p_Val2_i_fu_490_p2 <= std_logic_vector(signed(p_Val2_6_fu_474_p4) - signed(reg_429));
    p_Val2_i_i_fu_577_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_3_fu_571_p2));
    ssdm_int_V_write_ass_1_fu_553_p2 <= std_logic_vector(unsigned(audio_mono_dec_V_reg_377) - unsigned(audio_lrdiff_dec_V_reg_366));
    ssdm_int_V_write_ass_fu_547_p2 <= std_logic_vector(unsigned(audio_lrdiff_dec_V_reg_366) + unsigned(audio_mono_dec_V_reg_377));
    tmp_3_fu_571_p2 <= std_logic_vector(shift_left(unsigned(grp_operator_s_fu_399_ap_return),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    tmp_5_fu_464_p2 <= "1" when (k_reg_355 = ap_const_lv4_7) else "0";
        tmp_7_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_i_i_fu_577_p2),29));

    tmp_fu_440_p2 <= "1" when (i_reg_344 = ap_const_lv2_3) else "0";
    tmp_i_fu_535_p2 <= "1" when (i_i_reg_388 = ap_const_lv2_3) else "0";
    tmp_s_fu_452_p2 <= "1" when (k_reg_355 = ap_const_lv4_8) else "0";
end behav;
