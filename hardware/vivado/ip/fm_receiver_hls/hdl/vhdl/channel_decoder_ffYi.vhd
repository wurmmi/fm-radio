-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity channel_decoder_ffYi_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 73
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of channel_decoder_ffYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000001111", 1 => "1111111111011101", 2 => "1111111111010111", 
    3 => "1111111111011110", 4 => "1111111111111011", 5 => "0000000000100001", 
    6 => "0000000000110100", 7 => "0000000000011110", 8 => "1111111111101000", 
    9 => "1111111110111000", 10 => "1111111110110111", 11 => "1111111111110010", 
    12 => "0000000001000111", 13 => "0000000001110101", 14 => "0000000001001101", 
    15 => "1111111111011011", 16 => "1111111101101101", 17 => "1111111101011111", 
    18 => "1111111111010010", 19 => "0000000010000011", 20 => "0000000011110000", 
    21 => "0000000010110000", 22 => "1111111111001111", 23 => "1111111011100010", 
    24 => "1111111010101000", 25 => "1111111101111110", 26 => "0000000011111001", 
    27 => "0000001000001100", 28 => "0000000110110100", 29 => "1111111111000110", 
    30 => "1111110101010001", 31 => "1111110000110010", 32 => "1111111000001010", 
    33 => "0000001100100000", 34 => "0000100111101111", 35 => "0000111111000010", 
    36 => "0001001000001100", 37 => "0000111111000010", 38 => "0000100111101111", 
    39 => "0000001100100000", 40 => "1111111000001010", 41 => "1111110000110010", 
    42 => "1111110101010001", 43 => "1111111111000110", 44 => "0000000110110100", 
    45 => "0000001000001100", 46 => "0000000011111001", 47 => "1111111101111110", 
    48 => "1111111010101000", 49 => "1111111011100010", 50 => "1111111111001111", 
    51 => "0000000010110000", 52 => "0000000011110000", 53 => "0000000010000011", 
    54 => "1111111111010010", 55 => "1111111101011111", 56 => "1111111101101101", 
    57 => "1111111111011011", 58 => "0000000001001101", 59 => "0000000001110101", 
    60 => "0000000001000111", 61 => "1111111111110010", 62 => "1111111110110111", 
    63 => "1111111110111000", 64 => "1111111111101000", 65 => "0000000000011110", 
    66 => "0000000000110100", 67 => "0000000000100001", 68 => "1111111111111011", 
    69 => "1111111111011110", 70 => "1111111111010111", 71 => "1111111111011101", 
    72 => "0000000000001111" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity channel_decoder_ffYi is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 73;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of channel_decoder_ffYi is
    component channel_decoder_ffYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    channel_decoder_ffYi_rom_U :  component channel_decoder_ffYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


