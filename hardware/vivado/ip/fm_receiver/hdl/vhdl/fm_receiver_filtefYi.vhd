-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fm_receiver_filtefYi_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 73
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fm_receiver_filtefYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000011110", 1 => "11111111110111010", 
    2 => "11111111110101110", 3 => "11111111110111100", 
    4 => "11111111111110110", 5 => "00000000001000010", 
    6 => "00000000001101000", 7 => "00000000000111100", 
    8 => "11111111111010000", 9 => "11111111101110000", 
    10 => "11111111101101110", 11 => "11111111111100100", 
    12 => "00000000010001110", 13 => "00000000011101010", 
    14 => "00000000010011010", 15 => "11111111110110110", 
    16 => "11111111011011010", 17 => "11111111010111110", 
    18 => "11111111110100100", 19 => "00000000100000110", 
    20 => "00000000111100000", 21 => "00000000101100000", 
    22 => "11111111110011110", 23 => "11111110111000100", 
    24 => "11111110101010000", 25 => "11111111011111100", 
    26 => "00000000111110010", 27 => "00000010000011000", 
    28 => "00000001101101000", 29 => "11111111110001100", 
    30 => "11111101010100010", 31 => "11111100001100100", 
    32 => "11111110000010100", 33 => "00000011001000000", 
    34 => "00001001111011110", 35 => "00001111110000100", 
    36 => "00010010000011000", 37 => "00001111110000100", 
    38 => "00001001111011110", 39 => "00000011001000000", 
    40 => "11111110000010100", 41 => "11111100001100100", 
    42 => "11111101010100010", 43 => "11111111110001100", 
    44 => "00000001101101000", 45 => "00000010000011000", 
    46 => "00000000111110010", 47 => "11111111011111100", 
    48 => "11111110101010000", 49 => "11111110111000100", 
    50 => "11111111110011110", 51 => "00000000101100000", 
    52 => "00000000111100000", 53 => "00000000100000110", 
    54 => "11111111110100100", 55 => "11111111010111110", 
    56 => "11111111011011010", 57 => "11111111110110110", 
    58 => "00000000010011010", 59 => "00000000011101010", 
    60 => "00000000010001110", 61 => "11111111111100100", 
    62 => "11111111101101110", 63 => "11111111101110000", 
    64 => "11111111111010000", 65 => "00000000000111100", 
    66 => "00000000001101000", 67 => "00000000001000010", 
    68 => "11111111111110110", 69 => "11111111110111100", 
    70 => "11111111110101110", 71 => "11111111110111010", 
    72 => "00000000000011110" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity fm_receiver_filtefYi is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 73;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fm_receiver_filtefYi is
    component fm_receiver_filtefYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fm_receiver_filtefYi_rom_U :  component fm_receiver_filtefYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


